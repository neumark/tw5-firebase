rules_version = '2';
service cloud.firestore {

  // TIDDLER fields
  // tags?: list;
  // text?: string;
  // type: string;
  // fields?: map;
  // created?: Timestamp;
  // creator?: string (id of current user at create time)
  // modified?: Timestamp;
  // modifier?: string (id of current user at update time)
  // version: int

  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function hasBagPermission(wiki, bag, userId, permission) {
      return get(/databases/$(database)/documents/tw5-firestore-wikis/$(wiki)/bags/$(bag)/permissions/$(userId)).data[permission] == true;
    }

    function tiddlerVersionFirst() {
      return request.resource.data.version == 0;
    }

    function tiddlerVersionIncremented() {
      return (resource.data.version + 1) == request.resource.data.version;
    }

    function tiddlerCoreFieldsValid(fields) {
      // core tiddler fields:
      // tags?: list;
      // text?: string;
      // type?: string;
      // fields?: map;
      return (
        // 'tags' field is optional
        (!('tags' in fields) || request.resource.data.tags is list)
        // 'fields' field is optional
        && (!('fields' in fields) || request.resource.data.fields is map)
        // 'text' field is optional
        && (!('text' in fields) || request.resource.data.text is string)
        // 'type' field is mandatory
        && (request.resource.data.type is string)
      );
    }

    function tiddlerCreateFieldsValid() {
      // fields which must be set on tiddler create request:
      // created: Timestamp;
      // creator: string (id of current user at create time)
      // fields which must *not* be set on tiddler create request:
      // modified: Timestamp;
      // modifier: string (id of current user at update time)
      let fields = request.resource.data.keys();
      return (
        tiddlerCoreFieldsValid(fields)
        && !('modified' in fields)
        && !('modifier' in fields)
        && (request.resource.data.creator == request.auth.uid)
        && (request.resource.data.created == request.time)
        && tiddlerVersionFirst()
      );
    }

    function tiddlerUpdateFieldsValid() {
      // fields which must *not* be set on tiddler update request:
      // created: Timestamp;
      // creator: string (id of current user at create time)
      // fields which must be set on tiddler update request:
      // modified: Timestamp;
      // modifier: string (id of current user at update time)
      let fields = request.resource.data.keys();
      return (
        tiddlerCoreFieldsValid(fields)
        && !('created' in fields)
        && !('creator' in fields)
        && (request.resource.data.modifier == request.auth.uid)
        && (request.resource.data.modified == request.time)
        && tiddlerVersionIncremented()
      );
    }

    function tiddlerTitleValid(title) {
      // ensure the tiddler title comes before the sentinel doc
      return title < "\uFFFF_last_doc"
    }

    function permissionType(validPermissions) {
      // only $validPermissions permissions can be set and the value must be boolean.
      return request.resource.data.keys().hasOnly(validPermissions) && request.resource.data.values().hasOnly([true, false]);
    }

    function titleHasSystemPrefix(title) {
      // tiddler title is URIencoded, system prefix is '$:/'
      // encodeURIComponent("$:/") -> '%24%3A%2F'
      return tiddler[0:9] == "%24%3A%2F";
    }

    function titleHasPersonalPrefix(title) {
      // tiddler title is URIencoded, system prefix is '~/'
      // encodeURIComponent("~/") -> '~%2F'
      return tiddler[0:4] == "~%2F";
    }

    function tiddlerBelongsInContentBag(tiddlerTitle) {
      // Tiddler belongs in content bag iff:
      // 1. title does not start with system ($:/) or private prefix (~/)
      // 2. type is in whitelist of allowed types
      // 3. no system tags (CANNOT VERIFY IN FIRESTORE RULE), these are tags with '$:/' prefix.
      // NOTE: allowing text/html and image/svg+xml definitely opens up script tag insertion opportunities
      let allowed_types = ["text/x-markdown", "text/markdown", "text/css", "text/plain", "text/html", "text/vnd.tiddlywiki", "application/x-tiddler", "image/svg+xml", "image/jpeg", "image/jpg", "image/png", "image/gif"];
      return !titleHasPersonalPrefix(tiddlerTitle)
        && !titleHasSystemPrefix(tiddlerTitle)
        && (request.resource.data.type in allowed_types)
    }

    // --- DENY BY DEFAULT ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- TIDDLER ACCESS: PERSONAL BAG ---
    match /tw5-firestore-wikis/{wiki}/bags/{bagName}/tiddlers/{tiddler} {
      // Note: delete doesn't currently participate in the version-based locking mechanism.
      // Theoretically, this could allow users to accidentally delete tiddlers updated by others.
      // Since changes are propagated through the subscription, this is not a major concern in practice.
      allow create: if isSignedIn() && (bagName == 'user:' + request.auth.uid) && tiddlerTitleValid(tiddler) && tiddlerCreateFieldsValid();
      allow read, delete: if isSignedIn() && (bagName == 'user:' + request.auth.uid);
      allow update: if isSignedIn() && (bagName == 'user:' + request.auth.uid) && tiddlerUpdateFieldsValid();
    }
    // Note: no option to set custom bag permissions on personal bag

    // --- TIDDLER ACCESS: PUBLIC BAG ---
    match /tw5-firestore-wikis/{wiki}/bags/public/tiddlers/{tiddler} {
      allow create: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "public", request.auth.uid, "write")) && tiddlerTitleValid(tiddler) &&tiddlerCreateFieldsValid();
      allow read: if true;
      allow update: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "public", request.auth.uid, "write")) && tiddlerUpdateFieldsValid();
      allow delete: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "public", request.auth.uid, "write"));
    }

    // --- PERMISSION ACCESS: PUBLIC BAG --
    match /tw5-firestore-wikis/{wiki}/bags/public/permissions/{userId} {
      // allow user to check their own permissions
      allow read: if isSignedIn() && (isAdmin() || request.auth.uid == userId || hasBagPermission(wiki, "public", request.auth.uid, "grant"))
      allow write: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "public", request.auth.uid, "grant")) && permissionType(["write", "grant"]);
    }

    // --- TIDDLER ACCESS: CONTENT BAG ---
    match /tw5-firestore-wikis/{wiki}/bags/content/tiddlers/{tiddler} {
      allow create: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "content", request.auth.uid, "write")) && tiddlerTitleValid(tiddler) &&tiddlerCreateFieldsValid();
      allow read: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "content", request.auth.uid, "read"))
      allow update: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "content", request.auth.uid, "write")) && tiddlerUpdateFieldsValid();
      allow delete: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "content", request.auth.uid, "write"))
    }

    // --- PERMISSION ACCESS: CONTENT BAG --
    match /tw5-firestore-wikis/{wiki}/bags/content/permissions/{userId} {
      allow read: if isSignedIn() && (isAdmin() || request.auth.uid == userId || hasBagPermission(wiki, "content", request.auth.uid, "grant"))
      allow write: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "content", request.auth.uid, "grant")) && permissionType(["read", "write", "grant"]);
    }

    // --- TIDDLER ACCESS: SYSTEM BAG ---
    match /tw5-firestore-wikis/{wiki}/bags/system/tiddlers/{tiddler} {
      allow create: if isSignedIn() && isAdmin() && tiddlerTitleValid(tiddler) && tiddlerCreateFieldsValid();
      // system bag is public, so anonymous users can correctly view published content which may require
      // javascript, css, macro tiddlers from 'system' to be loaded into the wiki
      allow read: if true;
      // only admin can write
      allow update: if isSignedIn() && isAdmin() && tiddlerUpdateFieldsValid();
      allow delete: if isSignedIn() && isAdmin();
    }

    // --- PERMISSION ACCESS: SYSTEM BAG --
    match /tw5-firestore-wikis/{wiki}/bags/system/permissions/{userId} {
      allow read: if isSignedIn() && (isAdmin() || request.auth.uid == userId || hasBagPermission(wiki, "system", request.auth.uid, "grant"))
      allow write: if isSignedIn() && (isAdmin() || hasBagPermission(wiki, "system", request.auth.uid, "grant")) && permissionType(["write", "grant"]);
    }

  }
}
